<?xml version="1.0" encoding="UTF-8"?>
<jube>
  <benchmark name="hello" outpath="run_all_reduced">
    <comment>pin_check</comment>

    <parameterset name="compile_param">
      <!--<parameter name="system" type="string" tag="jr">jr</parameter>-->
      <!--<parameter name="system" type="string" tag="jrt">jrt</parameter>-->
      <!--<parameter name="system" type="string" tag="jw">jw</parameter>-->
      <!--<parameter name="system" type="string" tag="jwt">jwt</parameter>-->
      <!--<parameter name="system" type="string" tag="jwb">jwb</parameter>-->
      <parameter name="system" type="string" tag="js">js</parameter>
      <parameter name="system" type="string" tag="jd">jd</parameter>

      <parameter name="load_modules" type="string" tag="ip">ml Intel ParaStationMPI</parameter>
      <parameter name="load_modules" type="string" tag="ip23">ml Stages/2023; ml Intel ParaStationMPI</parameter>
      <parameter name="load_modules" type="string" tag="ii">ml Intel IntelMPI</parameter>
      <parameter name="load_modules" type="string" tag="ii23">ml Stages/2023; ml Intel IntelMPI</parameter>
      <parameter name="load_modules" type="string" tag="gp">ml GCC ParaStationMPI</parameter>
      <parameter name="load_modules" type="string" tag="gp23">ml Stages/2023; ml GCC ParaStationMPI</parameter>
      <parameter name="source_dir" type="string">${jube_benchmark_home}</parameter>
      <parameter name="source_file" type="string">all_hello_world_mask.cpp</parameter>
      <parameter name="source_file" type="string" tag="normal">hello_world_mask.c</parameter>
      <parameter name="dir_suf" type="string"></parameter>
      <parameter name="dir_suf" type="string" tag="normal">_normal</parameter>
      <!--parameter name="source_file" type="string" tag="valantis">valantis_example.c</parameter-->
      <parameter name="exe_file" type="string">hello_world.exe</parameter>
    </parameterset>

    <!-- copy source code into the sandbox directory -->
    <fileset name="source_code">
      <copy>${source_dir}/${source_file}</copy>
    </fileset>

    <!-- load modules used for compilation and compile the source code in the sandbox directory -->
    <step name="compile">
      <use>source_code</use>
      <use>compile_param</use>
      <do>${load_modules}</do>
      <do tag="ip|ii">mpicxx -qopenmp ${source_file} -o ${exe_file}</do>
      <do tag="gp">mpicxx -fopenmp ${source_file} -o ${exe_file}</do>
    </step>

    <!--
      JEDI numbering is different (no SMT)
      0-3: Pure OpenMP without SMT
      4-7: Pure OpenMP with SMT
      8-9: Hybrid with odd number of threads (w and w/o SMT)
      10-11: Hybrid with even number of threads (w and w/o SMT) (Tasks*Threads=physic.Cores)
      12-19: Pure MPI (w and w/o SMT); 14-17: Check pinning rule change
    -->
    <!-- initial paramterset with corresponding set in $JUBE_INCLUDE_PATH/platform.xml -->
    <parameterset name="systemParameter" init_with="platform.xml">
      <parameter name="nodes" type="int">1</parameter>
      <parameter name="i" type="int" mode="python">
	      {"jwt" : ",".join([str(i) for i in range(0,20)]),
         "jw"  : ",".join([str(i) for i in range(0,20)]),
         "jrt" : ",".join([str(i) for i in range(0,20)]),
         "jr"  : ",".join([str(i) for i in range(0,20)]),
         "js"  : ",".join([str(i) for i in range(0,20)]),
         "jd": ",".join([str(i) for i in range(0,14)])}.get("${system}",0)
      </parameter>
      <parameter name="tasks" type="int" mode="python">
	      {"jwt" : [ 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4,24,24,47,47,48,48,72,96][$i],
         "jw"  : [ 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4,24,24,47,47,48,48,72,96][$i],
         "jrt" : [ 1, 1, 1,  1, 1,  1,  1,  1,16,16,16,16,64,64,127,127,128,128,192,256][$i],
         "jr"  : [ 1, 1, 1,  1, 1,  1,  1,  1,16,16,16,16,64,64,127,127,128,128,192,256][$i],
         "js"  : [ 1, 1, 1,  1, 1,  1,  1,  1,16,16,16,16,64,64,127,127,128,128,192,256][$i],
         "jd": [ 1, 1, 1,  1, 1, 4, 4, 8, 8,72,144,216,287,288][$i]}.get("${system}",0)
      </parameter>
      <parameter name="threadspertask" type="int" mode="python">
	      {"jwt" : [12,24,36,48,24,48,72,96, 3, 3,12,12, 1, 1, 1, 1, 1, 1, 1, 1][$i],
         "jw"  : [12,24,36,48,24,48,72,96, 3, 3,12,12, 1, 1, 1, 1, 1, 1, 1, 1][$i],
         "jrt" : [32,64,96,128,64,128,192,256, 3, 3, 8, 8, 1, 1,  1,  1,  1,  1,  1,  1][$i],
         "jr"  : [32,64,96,128,64,128,192,256, 3, 3, 8, 8, 1, 1,  1,  1,  1,  1,  1,  1][$i],
         "js"  : [32,64,96,128,64,128,192,256, 3, 3, 8, 8, 1, 1,  1,  1,  1,  1,  1,  1][$i],
         "jd": [72,144,216,287,288, 1, 72, 3, 36, 1, 1,  1,  1,  1][$i]}.get("${system}",0)
      </parameter>
      <parameter name="tpc" type="int" mode="python">
	      {"jwt" : [ 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2][$i],
         "jw" : [ 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2][$i],
         "jrt" : [ 1, 1, 1,  1, 2,  2,  2,  2, 1, 2, 1, 2, 1, 2,  1,  2,  1,  2,  2,  2][$i],
         "jr" : [ 1, 1, 1,  1, 2,  2,  2,  2, 1, 2, 1, 2, 1, 2,  1,  2,  1,  2,  2,  2][$i],
         "js" : [ 1, 1, 1,  1, 2,  2,  2,  2, 1, 2, 1, 2, 1, 2,  1,  2,  1,  2,  2,  2][$i],
         "jd" : 1 }.get("${system}",0)
      </parameter>

      <parameter name="executable">./compile/${exe_file}</parameter>
      <parameter name="args_exec">${system}</parameter>
      <parameter name="timelimit">00:05:00</parameter>
      <parameter name="env">${load_modules}</parameter>
      <parameter name="measurement"></parameter> <!-- time -p -->
      <parameter name="queue" mode="python">
	      {"jwt": "batch", "jw": "batch", "jrt": "maint", "jr": "dc-cpu-devel", "jd": "all"}.get("${system}",0)
      </parameter> <!-- maint -A root-->
      <parameter name="account" mode="python">"zam" if "${system}" == "jd" else "cstao"</parameter> <!-- root, cstao -->
      <parameter name="additional_job_config">#SBATCH --threads-per-core=${tpc}</parameter>
      <parameter name="filename">
        ${system}-${nodes}-${tasks}-${threadspertask}-${tpc}-${cpubind}-${node_dist}-${socket_dist}-${core_dist}
      </parameter>
      <parameter name="outlogfile">${filename}.out</parameter>
      <parameter name="errlogfile">${filename}.err</parameter>
    </parameterset>

    <parameterset name="executeset" init_with="platform.xml">
      <parameter name="cpubind" tag="threads">threads</parameter>
      <parameter name="cpubind" tag="rank">rank</parameter>
      <parameter name="cpubind" tag="rank_ldom">rank_ldom</parameter>
      <parameter name="cpubind" tag="cores">cores</parameter>
      <parameter name="cpubind" tag="threads">threads</parameter>
      <parameter name="cpubind" tag="cb_all">threads,rank,rank_ldom,cores</parameter>
      <parameter name="cpubind_arg" mode="python" separator="%">
        "--cpu-bind=v,${cpubind}" if "${cpubind}" != "" else ""
      </parameter>

      <parameter name="node_dist">block</parameter>
      <parameter name="socket_dist">cyclic</parameter>
      <parameter name="core_dist" tag="cyclic">cyclic</parameter>
      <parameter name="core_dist" tag="fcyclic">fcyclic</parameter>
      <parameter name="core_dist" tag="cd_all">cyclic,fcyclic</parameter>
      <parameter name="distribution">${node_dist}:${socket_dist}:${core_dist}</parameter>
      <parameter name="distribution_arg" mode="python" separator="%">
        "--distribution=${distribution}" if "${distribution}" != "" else ""
      </parameter>

      <parameter name="tpc_arg">--threads-per-core=${tpc}</parameter>

      <parameter name="verbose"></parameter>
      <parameter name="verbose" tag="verbose">--verbose</parameter>

      <parameter name="args_starter" separator="%">
        ${verbose} ${tpc_arg} ${cpubind_arg} ${distribution_arg}
      </parameter>
    </parameterset>


    <!-- substitute pattern in submit script-->
    <substituteset name="executesub" init_with="platform.xml">
      <sub source="#ENV#" tag="ii" separator="|">
        export OMP_NUM_THREADS=$${SLURM_CPUS_PER_TASK}
        export OMP_PLACES=threads OMP_PROC_BIND=close
        export SRUN_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}
        export PSSLURM_PRINT_COREMAPS=1
        $env
      </sub>
      <sub source="#ENV#" tag="ip|gp" separator="|">
        export OMP_NUM_THREADS=$${SLURM_CPUS_PER_TASK}
        export OMP_PLACES=threads OMP_PROC_BIND=close
        export SRUN_CPUS_PER_TASK=${SLURM_CPUS_PER_TASK}
        export PSSLURM_PRINT_COREMAPS=1
        #export PSP_ONDEMAND=1
        ${env}
      </sub>
      <sub source="#MEASUREMENT#" dest="$measurement"/>
    </substituteset>

    
    <!-- prepare submit script and submit the job to the batch system-->
    <step name="exe" suffix="${nodes}-${tasks}-${threadspertask}-${tpc}-${cpubind}-${node_dist}-${socket_dist}-${core_dist}" depend="compile" procs="12" max_async="64">
      <use>systemParameter</use>            
      <!-- <use from="platform.xml">executeset</use> -->
      <use>executeset</use>
      <use>executesub</use>
      <use from="platform.xml">jobfiles</use>
      <do done_file="$done_file">${submit} ${submit_script}</do>
      <do>mkdir -p ${jube_benchmark_home}/pin_logs/</do>
      <do>cp ${outlogfile} ${jube_benchmark_home}/pin_logs/</do>
    </step>    

    <!-- pattern to extract time measurement -->
    <patternset name="runtime_pat">
      <pattern mode="pattern" name="runtime" unit="sec" type="float">real ${jube_pat_fp}</pattern>
    </patternset>

    <patternset name="out_pat">
      <pattern mode="pattern" name="begintime" unit="sec" type="float">begin time = ${jube_pat_fp}</pattern>
      <pattern mode="pattern" name="inittime" unit="sec" type="float">init time = ${jube_pat_fp}</pattern>
      <pattern name="initstart" unit="sec" type="float">initStart = ${jube_pat_fp} s</pattern>
      <pattern name="endtime" unit="sec" type="float">initEnd = ${jube_pat_fp} s</pattern>
      <pattern mode="pattern" name="totaltime" unit="sec" type="float">total time = ${jube_pat_fp}</pattern>
      <pattern mode="pattern" name="internaltime" type="float">internalTime = ${jube_pat_fp} s</pattern>

<!--      <pattern mode="python" name="tot_time" unit="sec" type="float">${totaltime}-${begintime_min}</pattern> -->
<!--      <pattern mode="pattern" name="rankid" type="int">rankend = ${jube_pat_int} before MPI_Finalize</pattern> -->
    </patternset>

    <patternset name="status_pat">
      <pattern name="job_id" type="int">Submitted batch job $jube_pat_int</pattern>
      <pattern name="status" mode="perl">'`sacct --format State -j $job_id | head -n 3 | tail -n 1`'</pattern>
      <pattern name="exit_code" mode="perl">'`sacct --format ExitCode -j $job_id | head -n 3 | tail -n 1`'</pattern>
    </patternset>

    <!-- analyse the file ${errlogfile} in the sandbox directory of step named 'exe'-->
    <analyser name="analyse_time" reduce="false">
      <use>runtime_pat</use>
      <analyse step="exe">
        <file>${errlogfile}</file>
        <file use="out_pat">${outlogfile}</file>
        <file use="status_pat">stdout</file>
      </analyse>
    </analyser>

    <!-- create a result table-->
    <result>
      <use>analyse_time</use>
      <table name="res" style="pretty">
        <column>system</column>
        <column>nodes</column>
        <column>tasks</column>
        <column title="tpt">threadspertask</column>
        <column>tpc</column>
        <column>cpubind</column>
        <column title="dist">distribution</column>
        <column>runtime</column> 
        <column>status</column>
        <column>exit_code</column>
      </table>
    </result>
    
  </benchmark>
</jube>
